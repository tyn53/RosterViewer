#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gmi.RosterManager.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RosterViewer")]
	public partial class RosterManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertEntityType(EntityType instance);
    partial void UpdateEntityType(EntityType instance);
    partial void DeleteEntityType(EntityType instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertStat(Stat instance);
    partial void UpdateStat(Stat instance);
    partial void DeleteStat(Stat instance);
    #endregion
		
		public RosterManagerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RosterViewerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RosterManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RosterManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RosterManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RosterManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<EntityType> EntityTypes
		{
			get
			{
				return this.GetTable<EntityType>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Stat> Stats
		{
			get
			{
				return this.GetTable<Stat>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teamId;
		
		private string _teamName;
		
		private System.Nullable<int> _imageId;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Stat> _Stats;
		
		private EntityRef<Image> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OnteamNameChanging(string value);
    partial void OnteamNameChanged();
    partial void OnimageIdChanging(System.Nullable<int> value);
    partial void OnimageIdChanged();
    #endregion
		
		public Team()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Stats = new EntitySet<Stat>(new Action<Stat>(this.attach_Stats), new Action<Stat>(this.detach_Stats));
			this._Image = default(EntityRef<Image>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this.OnteamNameChanging(value);
					this.SendPropertyChanging();
					this._teamName = value;
					this.SendPropertyChanged("teamName");
					this.OnteamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="Int")]
		public System.Nullable<int> imageId
		{
			get
			{
				return this._imageId;
			}
			set
			{
				if ((this._imageId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="teamId", OtherKey="teamId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Stat", Storage="_Stats", ThisKey="teamId", OtherKey="entityId")]
		public EntitySet<Stat> Stats
		{
			get
			{
				return this._Stats;
			}
			set
			{
				this._Stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Team", Storage="_Image", ThisKey="imageId", OtherKey="imageId", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._imageId = value.imageId;
					}
					else
					{
						this._imageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Stats(Stat entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Stats(Stat entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityType")]
	public partial class EntityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _entityTypeId;
		
		private string _entityType1;
		
		private EntitySet<Stat> _Stats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentityTypeIdChanging(int value);
    partial void OnentityTypeIdChanged();
    partial void OnentityType1Changing(string value);
    partial void OnentityType1Changed();
    #endregion
		
		public EntityType()
		{
			this._Stats = new EntitySet<Stat>(new Action<Stat>(this.attach_Stats), new Action<Stat>(this.detach_Stats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int entityTypeId
		{
			get
			{
				return this._entityTypeId;
			}
			set
			{
				if ((this._entityTypeId != value))
				{
					this.OnentityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._entityTypeId = value;
					this.SendPropertyChanged("entityTypeId");
					this.OnentityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="entityType", Storage="_entityType1", DbType="NVarChar(10)")]
		public string entityType1
		{
			get
			{
				return this._entityType1;
			}
			set
			{
				if ((this._entityType1 != value))
				{
					this.OnentityType1Changing(value);
					this.SendPropertyChanging();
					this._entityType1 = value;
					this.SendPropertyChanged("entityType1");
					this.OnentityType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityType_Stat", Storage="_Stats", ThisKey="entityTypeId", OtherKey="entityTypeId")]
		public EntitySet<Stat> Stats
		{
			get
			{
				return this._Stats;
			}
			set
			{
				this._Stats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stats(Stat entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = this;
		}
		
		private void detach_Stats(Stat entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _imageId;
		
		private string _imageFileName;
		
		private System.Data.Linq.Binary _imageData;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnimageIdChanging(int value);
    partial void OnimageIdChanged();
    partial void OnimageFileNameChanging(string value);
    partial void OnimageFileNameChanged();
    partial void OnimageDataChanging(System.Data.Linq.Binary value);
    partial void OnimageDataChanged();
    #endregion
		
		public Image()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int imageId
		{
			get
			{
				return this._imageId;
			}
			set
			{
				if ((this._imageId != value))
				{
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageFileName", DbType="NVarChar(128)")]
		public string imageFileName
		{
			get
			{
				return this._imageFileName;
			}
			set
			{
				if ((this._imageFileName != value))
				{
					this.OnimageFileNameChanging(value);
					this.SendPropertyChanging();
					this._imageFileName = value;
					this.SendPropertyChanged("imageFileName");
					this.OnimageFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imageData
		{
			get
			{
				return this._imageData;
			}
			set
			{
				if ((this._imageData != value))
				{
					this.OnimageDataChanging(value);
					this.SendPropertyChanging();
					this._imageData = value;
					this.SendPropertyChanged("imageData");
					this.OnimageDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Team", Storage="_Teams", ThisKey="imageId", OtherKey="imageId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Player", Storage="_Players", ThisKey="imageId", OtherKey="imageId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _playerId;
		
		private string _playerScreenName;
		
		private string _playerFirstName;
		
		private string _playerLastName;
		
		private System.Nullable<int> _imageId;
		
		private System.Nullable<int> _teamId;
		
		private EntitySet<Stat> _Stats;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayerIdChanging(int value);
    partial void OnplayerIdChanged();
    partial void OnplayerScreenNameChanging(string value);
    partial void OnplayerScreenNameChanged();
    partial void OnplayerFirstNameChanging(string value);
    partial void OnplayerFirstNameChanged();
    partial void OnplayerLastNameChanging(string value);
    partial void OnplayerLastNameChanged();
    partial void OnimageIdChanging(System.Nullable<int> value);
    partial void OnimageIdChanged();
    partial void OnteamIdChanging(System.Nullable<int> value);
    partial void OnteamIdChanged();
    #endregion
		
		public Player()
		{
			this._Stats = new EntitySet<Stat>(new Action<Stat>(this.attach_Stats), new Action<Stat>(this.detach_Stats));
			this._Image = default(EntityRef<Image>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int playerId
		{
			get
			{
				return this._playerId;
			}
			set
			{
				if ((this._playerId != value))
				{
					this.OnplayerIdChanging(value);
					this.SendPropertyChanging();
					this._playerId = value;
					this.SendPropertyChanged("playerId");
					this.OnplayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerScreenName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string playerScreenName
		{
			get
			{
				return this._playerScreenName;
			}
			set
			{
				if ((this._playerScreenName != value))
				{
					this.OnplayerScreenNameChanging(value);
					this.SendPropertyChanging();
					this._playerScreenName = value;
					this.SendPropertyChanged("playerScreenName");
					this.OnplayerScreenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerFirstName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string playerFirstName
		{
			get
			{
				return this._playerFirstName;
			}
			set
			{
				if ((this._playerFirstName != value))
				{
					this.OnplayerFirstNameChanging(value);
					this.SendPropertyChanging();
					this._playerFirstName = value;
					this.SendPropertyChanged("playerFirstName");
					this.OnplayerFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerLastName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string playerLastName
		{
			get
			{
				return this._playerLastName;
			}
			set
			{
				if ((this._playerLastName != value))
				{
					this.OnplayerLastNameChanging(value);
					this.SendPropertyChanging();
					this._playerLastName = value;
					this.SendPropertyChanged("playerLastName");
					this.OnplayerLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="Int")]
		public System.Nullable<int> imageId
		{
			get
			{
				return this._imageId;
			}
			set
			{
				if ((this._imageId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int")]
		public System.Nullable<int> teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Stat", Storage="_Stats", ThisKey="playerId", OtherKey="entityId")]
		public EntitySet<Stat> Stats
		{
			get
			{
				return this._Stats;
			}
			set
			{
				this._Stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Player", Storage="_Image", ThisKey="imageId", OtherKey="imageId", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._imageId = value.imageId;
					}
					else
					{
						this._imageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="teamId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._teamId = value.teamId;
					}
					else
					{
						this._teamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stats(Stat entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Stats(Stat entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stat")]
	public partial class Stat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _statId;
		
		private int _entityTypeId;
		
		private int _entityId;
		
		private string _statName;
		
		private string _statValue;
		
		private EntityRef<EntityType> _EntityType;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstatIdChanging(int value);
    partial void OnstatIdChanged();
    partial void OnentityTypeIdChanging(int value);
    partial void OnentityTypeIdChanged();
    partial void OnentityIdChanging(int value);
    partial void OnentityIdChanged();
    partial void OnstatNameChanging(string value);
    partial void OnstatNameChanged();
    partial void OnstatValueChanging(string value);
    partial void OnstatValueChanged();
    #endregion
		
		public Stat()
		{
			this._EntityType = default(EntityRef<EntityType>);
			this._Team = default(EntityRef<Team>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int statId
		{
			get
			{
				return this._statId;
			}
			set
			{
				if ((this._statId != value))
				{
					this.OnstatIdChanging(value);
					this.SendPropertyChanging();
					this._statId = value;
					this.SendPropertyChanged("statId");
					this.OnstatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityTypeId", DbType="Int NOT NULL")]
		public int entityTypeId
		{
			get
			{
				return this._entityTypeId;
			}
			set
			{
				if ((this._entityTypeId != value))
				{
					if (this._EntityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._entityTypeId = value;
					this.SendPropertyChanged("entityTypeId");
					this.OnentityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityId", DbType="Int NOT NULL")]
		public int entityId
		{
			get
			{
				return this._entityId;
			}
			set
			{
				if ((this._entityId != value))
				{
					if ((this._Team.HasLoadedOrAssignedValue || this._Player.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentityIdChanging(value);
					this.SendPropertyChanging();
					this._entityId = value;
					this.SendPropertyChanged("entityId");
					this.OnentityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statName", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string statName
		{
			get
			{
				return this._statName;
			}
			set
			{
				if ((this._statName != value))
				{
					this.OnstatNameChanging(value);
					this.SendPropertyChanging();
					this._statName = value;
					this.SendPropertyChanged("statName");
					this.OnstatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statValue", DbType="NVarChar(17) NOT NULL", CanBeNull=false)]
		public string statValue
		{
			get
			{
				return this._statValue;
			}
			set
			{
				if ((this._statValue != value))
				{
					this.OnstatValueChanging(value);
					this.SendPropertyChanging();
					this._statValue = value;
					this.SendPropertyChanged("statValue");
					this.OnstatValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityType_Stat", Storage="_EntityType", ThisKey="entityTypeId", OtherKey="entityTypeId", IsForeignKey=true)]
		public EntityType EntityType
		{
			get
			{
				return this._EntityType.Entity;
			}
			set
			{
				EntityType previousValue = this._EntityType.Entity;
				if (((previousValue != value) 
							|| (this._EntityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityType.Entity = null;
						previousValue.Stats.Remove(this);
					}
					this._EntityType.Entity = value;
					if ((value != null))
					{
						value.Stats.Add(this);
						this._entityTypeId = value.entityTypeId;
					}
					else
					{
						this._entityTypeId = default(int);
					}
					this.SendPropertyChanged("EntityType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Stat", Storage="_Team", ThisKey="entityId", OtherKey="teamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Stats.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Stats.Add(this);
						this._entityId = value.teamId;
					}
					else
					{
						this._entityId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Stat", Storage="_Player", ThisKey="entityId", OtherKey="playerId", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Stats.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Stats.Add(this);
						this._entityId = value.playerId;
					}
					else
					{
						this._entityId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
